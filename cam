#!/usr/bin/env python3.6
#
# This file is part of qhy-camd.
#
# qhy-camd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# qhy-camd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with qhy-camd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for managing one of the cameras"""

import glob
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.camera.qhy import CommandStatus, CameraStatus, CoolerMode, Config

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(config_paths, camera_id, command, args):
    """Prints the message associated with a status code and returns the code"""
    config = Config(config_paths[camera_id])
    try:
        ret = command(config, sorted(config_paths.keys()), args)
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop(config, args)

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))

    return ret


def status(config, *_):
    """Reports the current camera status"""
    with config.daemon.connect() as camd:
        data = camd.report_status()

    state_desc = CameraStatus.label(data['state'], True)
    if data['state'] == CameraStatus.Acquiring:
        progress = '{:.1f} / {:.1f}s'.format(data['exposure_progress'], data['exposure_time'])
        state_desc += ' (' + TFmt.Bold + progress + TFmt.Clear + ')'

    # Camera is disabled
    print('   Camera is {}'.format(state_desc))
    if data['state'] != CameraStatus.Disabled:
        if data['state'] > CameraStatus.Idle:
            if data['sequence_frame_limit'] > 0:
                print('   Acquiring frame ' + TFmt.Bold + str(data['sequence_frame_count'] + 1) +
                      ' / ' + str(data['sequence_frame_limit']) + TFmt.Clear)
            else:
                print('   Acquiring ' + TFmt.Bold + 'UNTIL STOPPED' + TFmt.Clear)

        print('   Temperature is ' + TFmt.Bold + '{:.0f}\u00B0C'.format(data['cooler_temperature']) + TFmt.Clear +
              ' (' + TFmt.Bold + '{:.0f}'.format(data['cooler_pwm']) + TFmt.Clear + '% power, ' +
              CoolerMode.label(data['cooler_mode'], True) + ')')

        if data['cooler_setpoint'] is not None:
            print('   Temperature set point is ' + TFmt.Bold + '{:.0f}\u00B0C'.format(data['cooler_setpoint']) + TFmt.Clear)

        print('   Exposure time is ' + TFmt.Bold + '{:.3f} s'.format(data['exposure_time']) + TFmt.Clear)

    return 0


def set_temperature(config, camera_ids, args):
    """Set the camera temperature"""
    if len(args) == 1:
        if args[0] == 'warm':
            temp = None
        else:
            temp = int(args[0])
        with config.daemon.connect() as camd:
            return camd.set_target_temperature(temp)
    print('usage: {} [{}] temperature <degrees>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_exposure(config, camera_ids, args):
    """Set the camera exposure time"""
    if len(args) == 1:
        exposure = float(args[0])
        with config.daemon.connect() as camd:
            return camd.set_exposure(exposure)
    print('usage: {} [{}] exposure <seconds>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_gain(config, camera_ids, args):
    """Set the camera exposure time"""
    if len(args) == 1:
        gain = int(args[0])
        with config.daemon.connect() as camd:
            return camd.set_gain(gain)
    print('usage: {} [{}] gain <value>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def set_offset(config, camera_ids, args):
    """Set the camera exposure time"""
    if len(args) == 1:
        offset = int(args[0])
        with config.daemon.connect() as camd:
            return camd.set_offset(offset)
    print('usage: {} [{}] offset <value>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1

def set_led(config, camera_ids, args):
    """Set the camera calihbration LED"""
    if len(args) == 3:
        mode = int(args[0])
        offset = int(args[1])
        width = int(args[2])
        with config.daemon.connect() as camd:
            return camd.set_led(mode, offset, width)
    print('usage: {} [{}] led <mode> <offset> <width>'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1

def start(config, camera_ids, args):
    """Starts an exposure sequence"""
    if len(args) == 1:
        try:
            count = 0 if args[0] == 'continuous' else int(args[0])
            if args[0] == 'continuous' or count > 0:
                with config.daemon.connect() as camd:
                    return camd.start_sequence(count)
        except Exception:
            print('error: invalid exposure count:', args[0])
            return -1
    print('usage: {} [{}] start (continuous|<count>)'.format(SCRIPT_NAME, '|'.join(camera_ids)))
    return -1


def stop(config, *_):
    """Stops any active camera exposures"""
    with config.daemon.connect() as camd:
        return camd.stop_sequence()


def initialize(config, *_):
    """Enables the camera driver"""
    # Initialization can take more than 5 sec, so bump timeout to 10.
    with config.daemon.connect(10) as camd:
        return camd.initialize()


def shutdown(config, *_):
    """Disables the camera drivers"""
    with config.daemon.connect() as camd:
        return camd.shutdown()


def print_usage(config_paths):
    """Prints the utility help"""
    print('usage: {} [{}] <command> [<args>]'.format(SCRIPT_NAME, '|'.join(sorted(config_paths.keys()))))
    print()
    print('general commands:')
    print('   status       print a human-readable summary of the camera status')
    print('   exposure     set exposure time in seconds')
    print('   start        start an exposure sequence')
    print()
    print('engineering commands:')
    print('   init         connect to and initialize the camera')
    print('   temperature  set target temperature and enable cooling')
    print('   kill         disconnect from the camera')
    print()

    return 0


if __name__ == '__main__':
    if 'CAMD_CONFIG_ROOT' in os.environ:
        config_root = os.environ['CAMD_CONFIG_ROOT']
    else:
        config_root = '/etc/camd'

    configs = {os.path.basename(p)[:-5]: p for p in glob.glob(os.path.join(config_root, '*.json'))}
    if not configs:
        print('error: no camera configs were found in ' + config_root)
        print('       run as CAMD_CONFIG_ROOT=/path/to/config/root ' + ' '.join(sys.argv))
        print('       to specify the configuration root directory')
        sys.exit(1)

    if len(sys.argv) == 2 and sys.argv[1] == 'list-cameras':
        print(' '.join(sorted(configs.keys())))
        sys.exit(0)

    if len(sys.argv) < 3:
        sys.exit(print_usage(configs))

    commands = {
        'temperature': set_temperature,
        'exposure': set_exposure,
        'gain': set_gain,
        'offset': set_offset,
        'led': set_led,
        'status': status,
        'start': start,
        'stop': stop,
        'init': initialize,
        'kill': shutdown
    }

    if sys.argv[1] not in configs or sys.argv[2] not in commands:
        sys.exit(print_usage(configs))

    sys.exit(run_command(configs, sys.argv[1], commands[sys.argv[2]], sys.argv[3:]))
